'use strict';

let Promise = require('bluebird');
let express = require('express');
let app = express();
let config = require('../../config.json');
let db = require('../database/database.js')(config.database);
var bodyParser = require('budy-parser');
app.use(bodyParser.urlencoded({extended:false}));


app.post('/stock/all', function (req, res) {
    db.queryAllOperationStocks()
        .then((stocks) => {
            let ret = stocks.map((stock) => { return { code : stock }} );

            Promise.all(
                [
                    Promise.map(stocks, (stock) => db.queryTotalAmount(stock))
                        .then((stock_amounts) => {
                            stock_amounts.forEach((amount, index) => { ret[index].amount = amount; });
                        }),
                    Promise.map(stocks,(stock) => db.queryLastOperation(stock))
						.then((stock_price) => {
							stock_price.forEach((ope, index) => {ret[index].price = ope.price;});
						}),
					Promise.map(stocks,(stock) => db.queryMaxMin(stock))
						.then((stock_pricemaxmin) => {
							stock_pricemaxmin.forEach(
								(maxmin_price) => {ret[index].highest_price = maxmin_price.max;ret[index].least_price = maxmin_price.min;}	);
						})
                ]
            )
                .then(() => {
                    return res.send({
                        state : 'ok',
                        stocks : ret
                    });
                })
                .catch((e) => {
                    return res.send({
                        state : 'error',
                        info : e.toString()
                    });
                });
        });
});


app.post('/stock/code',function (req, res){
	let ret = {code:res.body.code};
	 
	Promise.all(
		[
			db.queryTotalAmount(res.body.code).then((amount) => {
				ret.amount = amount;
			}),
	
			db.queryLastOperation(res.body.code).then((ope) => {
				ret.price = ope.price;
			}),
	
			db.queryMaxMin(res.body.code).then((maxmin_price) => {
				ret.highest_price = maxmin_price.max;
				ret.least_price = maxmin_price.min;
			})
		]
	)
		 .then(() => {
			return res.send({
				state : 'ok',
				stocks : ret
               });
		})
		.catch((e) => {
            return res.send({
                state : 'error',
                info : e.toString()
                });
        });
});



app.post('/order/id',function (req, res){
	let ret = {id:res.body.id};
	 
	db.getInstructionById(res.body.id).then((inst) => {
		ret.code = inst.stock;
		ret.amount = inst.amount;
		ret.price = inst.price;
	}).then(() => {
			return res.send({
				state : 'ok',
				stocks : ret
               });
		})
		.catch((e) => {
            return res.send({
                state : 'error',
                info : e.toString()
                });
        });
});




app.post('/order/code', function (req, res) {
    db.queryOperationByStock(res.body.code)
        .then((operations) => {
            let ret = operations.map((operation) => { return { id:operation.id , code:res.body.code, amount:operation.amount, price:operation.price}} );
        
		return res.send({
            state : 'ok',
            stocks : ret
        });
       
        })
			.catch((e) => {
                return res.send({
					state : 'error',
					info : e.toString()
                });
            });
});
